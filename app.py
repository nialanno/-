# -*- coding: utf-8 -*-
"""
–ì–û-–ö–∞—Ä—Ç–∞: –û–±—É—á–µ–Ω–∏–µ –ø–æ –ü—Ä–∏–∫–∞–∑—É –ú–ß–° ‚Ññ429
(c) 2025
"""

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í –ù–ê–ß–ê–õ–ï) ---
import streamlit as st
import pandas as pd
import folium
from streamlit_folium import st_folium
import numpy as np
from geopy.distance import geodesic
from geopy.geocoders import Nominatim
import json
import os

# --- –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø—Ä–∏–Ω—Ç ---
st.write("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")

# --- Streamlit Configuration (MUST BE AT THE TOP)
st.set_page_config(
    page_title="üö® –ì–û-–ö–∞—Ä—Ç–∞: –û–±—É—á–µ–Ω–∏–µ –ø–æ –ü—Ä–∏–∫–∞–∑—É –ú–ß–° ‚Ññ429",
    page_icon="üö®",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if 'accepted_terms' not in st.session_state:
    st.session_state['accepted_terms'] = False
if 'selected_district' not in st.session_state:
    st.session_state['selected_district'] = None
if 'show_memo' not in st.session_state:
    st.session_state['show_memo'] = None
if 'show_add_memo' not in st.session_state:
    st.session_state['show_add_memo'] = False
if 'show_add_building' not in st.session_state:
    st.session_state['show_add_building'] = False
if 'show_add_memorial' not in st.session_state:
    st.session_state['show_add_memorial'] = False
if 'show_memorials' not in st.session_state:
    st.session_state['show_memorials'] = False
if 'show_memorial_details' not in st.session_state:
    st.session_state['show_memorial_details'] = None
if 'user_location' not in st.session_state:
    st.session_state['user_location'] = None
if 'selected_emergency' not in st.session_state:
    st.session_state['selected_emergency'] = None
if 'closest_building' not in st.session_state:
    st.session_state['closest_building'] = None
if 'route_map' not in st.session_state:
    st.session_state['route_map'] = None

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def load_buildings_data():
    # –§–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–∂–µ–≤—Å–∫–∞
    data = {
        'id': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        'latitude': [56.8519, 56.8490, 56.8550, 56.8470, 56.8530, 56.8520, 56.8480, 56.8540, 56.8500, 56.8510],
        'longitude': [53.2013, 53.2100, 53.2050, 53.1990, 53.2070, 53.2020, 53.2040, 53.2090, 53.2000, 53.2030],
        'floors': [9, 5, 12, 3, 15, 4, 2, 8, 1, 20],
        'material': ['–∫–∏—Ä–ø–∏—á', '–ø–∞–Ω–µ–ª—å', '–±–µ—Ç–æ–Ω', '–¥–µ—Ä–µ–≤–æ', '–±–µ—Ç–æ–Ω', '–∫–∏—Ä–ø–∏—á', '–º–µ—Ç–∞–ª–ª', '–±–µ—Ç–æ–Ω', '–¥–µ—Ä–µ–≤–æ', '–±–µ—Ç–æ–Ω'],
        'purpose': ['–∂–∏–ª–æ–π –¥–æ–º', '–∂–∏–ª–æ–π –¥–æ–º', '–æ—Ñ–∏—Å', '–∂–∏–ª–æ–π –¥–æ–º', '—Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä', '—à–∫–æ–ª–∞', '–≥–∞—Ä–∞–∂', '–±–æ–ª—å–Ω–∏—Ü–∞', '–≥–∞—Ä–∞–∂', '–æ—Ñ–∏—Å'],
        'plan_link': [
            'https://via.placeholder.com/600x400/00ff00/000000?text=–ü–ª–∞–Ω+–≠–≤–∞–∫—É–∞—Ü–∏–∏+1',
            'https://via.placeholder.com/600x400/00ff00/000000?text=–ü–ª–∞–Ω+–≠–≤–∞–∫—É–∞—Ü–∏–∏+2',
            'https://via.placeholder.com/600x400/00ff00/000000?text=–ü–ª–∞–Ω+–≠–≤–∞–∫—É–∞—Ü–∏–∏+3',
            'https://via.placeholder.com/600x400/00ff00/000000?text=–ü–ª–∞–Ω+–≠–≤–∞–∫—É–∞—Ü–∏–∏+4',
            'https://via.placeholder.com/600x400/00ff00/000000?text=–ü–ª–∞–Ω+–≠–≤–∞–∫—É–∞—Ü–∏–∏+5',
            'https://via.placeholder.com/600x400/00ff00/000000?text=–ü–ª–∞–Ω+–≠–≤–∞–∫—É–∞—Ü–∏–∏+6',
            'https://via.placeholder.com/600x400/00ff00/000000?text=–ü–ª–∞–Ω+–≠–≤–∞–∫—É–∞—Ü–∏–∏+7',
            'https://via.placeholder.com/600x400/00ff00/000000?text=–ü–ª–∞–Ω+–≠–≤–∞–∫—É–∞—Ü–∏–∏+8',
            'https://via.placeholder.com/600x400/00ff00/000000?text=–ü–ª–∞–Ω+–≠–≤–∞–∫—É–∞—Ü–∏–∏+9',
            'https://via.placeholder.com/600x400/00ff00/000000?text=–ü–ª–∞–Ω+–≠–≤–∞–∫—É–∞—Ü–∏–∏+10'
        ]
    }
    df = pd.DataFrame(data)
    return df

@st.cache_data
def load_emergency_rules():
    # –†–µ–∞–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏–∑ –ü—Ä–∏–∫–∞–∑–∞ –ú–ß–° ‚Ññ429
    data = {
        'type_ru': [
            '–ü–æ–∂–∞—Ä', '–ù–∞–≤–æ–¥–Ω–µ–Ω–∏–µ', '–£—Ä–∞–≥–∞–Ω', '–ó–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–µ', '–ê–≤–∞—Ä–∏—è –Ω–∞ –∑–∞–≤–æ–¥–µ',
            '–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥', '–°–∏–ª—å–Ω—ã–π –º–æ—Ä–æ–∑', '–°–∏–ª—å–Ω–∞—è –∂–∞—Ä–∞', '–ì–æ–ª–æ–ª–µ–¥–∏—Ü–∞', '–°—Ö–æ–¥ —Å–Ω–µ–∂–Ω—ã—Ö –ª–∞–≤–∏–Ω',
            '–õ–µ—Å–Ω—ã–µ –ø–æ–∂–∞—Ä—ã', '–ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É–≥—Ä–æ–∑—ã', '–†–∞–¥–∏–∞—Ü–∏–æ–Ω–Ω—ã–µ —É–≥—Ä–æ–∑—ã', '–•–∏–º–∏—á–µ—Å–∫–∏–µ —É–≥—Ä–æ–∑—ã',
            '–ê–≤–∞—Ä–∏—è –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ', '–í–∑—Ä—ã–≤', '–£—Ç–µ—á–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤', '–ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã'
        ],
        'description_ru': [
            '–í–æ–∑–≥–æ—Ä–∞–Ω–∏–µ –≤ –∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –Ω–∞ —É–ª–∏—Ü–µ',
            '–ü–æ–¥—Ç–æ–ø–ª–µ–Ω–∏–µ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏',
            '–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä',
            '–¢–æ–ª—á–∫–∏ –∑–µ–º–ª–∏',
            '–£—Ç–µ—á–∫–∞ —Ö–∏–º–∏–∫–∞—Ç–æ–≤ –∏–ª–∏ –∞–≤–∞—Ä–∏—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ',
            '–°–Ω–µ–≥–æ–ø–∞–¥ —Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é 20 –º–º –∏ –±–æ–ª–µ–µ –∑–∞ 12 —á–∞—Å–æ–≤',
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ –Ω–∏–∂–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–π',
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ –≤—ã—à–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–π',
            '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ–ª–µ–¥–∏—Ü—ã –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö',
            '–°—Ö–æ–¥ —Å–Ω–µ–∂–Ω—ã—Ö –ª–∞–≤–∏–Ω, —É–≥—Ä–æ–∑–∞ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–º –ø—É–Ω–∫—Ç–∞–º',
            '–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ª–µ—Å–Ω—ã—Ö –ø–æ–∂–∞—Ä–æ–≤',
            '–£–≥—Ä–æ–∑–∞ –∏–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–Ω—ã–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º',
            '–£—Ç–µ—á–∫–∞ —Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤',
            '–£—Ç–µ—á–∫–∞ —Ö–∏–º–∏—á–µ—Å–∫–∏ –æ–ø–∞—Å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤',
            '–ê–≤–∞—Ä–∏—è –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ (–∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω–æ–º, –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–º –∏ —Ç.–¥.)',
            '–í–∑—Ä—ã–≤, —É–≥—Ä–æ–∑–∞ –∂–∏–∑–Ω–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—é',
            '–£—Ç–µ—á–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤, —É–≥—Ä–æ–∑–∞ –∂–∏–∑–Ω–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—é',
            '–ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã, —É–≥—Ä–æ–∑–∞ –∂–∏–∑–Ω–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—é'
        ],
        'signs_ru': [
            '–ó–∞–ø–∞—Ö –¥—ã–º–∞, –æ–≥–æ–Ω—å, —Å–∏—Ä–µ–Ω—ã',
            '–í–æ–¥–∞ –Ω–∞ —É–ª–∏—Ü–µ, –ø–æ–¥—ä—ë–º —É—Ä–æ–≤–Ω—è',
            '–í–µ—Ç–µ—Ä >15 –º/—Å, –ø–∞–¥–µ–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤',
            '–î—Ä–æ–∂–∞–Ω–∏–µ –∑–¥–∞–Ω–∏–π, —Ç—Ä–µ—Å–∫',
            '–ó–∞–ø–∞—Ö, –ø–∞—Ä—ã, –∫–∞—à–µ–ª—å, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞',
            '–°–Ω–µ–≥, –º–µ—Ç–µ–ª—å, –ø–ª–æ—Ö–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å',
            '–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
            '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
            '–°–∫–æ–ª—å–∑–∫–∏–µ –¥–æ—Ä–æ–≥–∏, –ø–∞–¥–µ–Ω–∏—è',
            '–°–Ω–µ–∂–Ω—ã–µ –º–∞—Å—Å—ã, —à—É–º, —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è',
            '–ó–∞–ø–∞—Ö –¥—ã–º–∞, –æ–≥–æ–Ω—å –≤ –ª–µ—Å—É',
            '–ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–æ–ª–µ–≤—à–∏—Ö',
            '–ê–Ω–æ–º–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–æ–∑–∏–º–µ—Ç—Ä–∞',
            '–ó–∞–ø–∞—Ö, –ø–∞—Ä—ã, –∫–∞—à–µ–ª—å, —É–¥—É—à—å–µ',
            '–°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ, —Å—Ö–æ–¥ —Å —Ä–µ–ª—å—Å, –∞–≤–∞—Ä–∏—è',
            '–ì—Ä–æ–º–∫–∏–π –∑–≤—É–∫, –≤—Å–ø—ã—à–∫–∞, —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è',
            '–ó–∞–ø–∞—Ö, –ø–∞—Ä—ã, –∫–∞—à–µ–ª—å, —É–¥—É—à—å–µ',
            '–ó–∞–ø–∞—Ö, –ø–∞—Ä—ã, –∫–∞—à–µ–ª—å, —É–¥—É—à—å–µ'
        ],
        'actions_ru': [
            '–ü–æ–∫–∏–Ω—É—Ç—å –∑–¥–∞–Ω–∏–µ, –≤—ã–∑–≤–∞—Ç—å 112, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏—Ñ—Ç',
            '–û—Ç–æ–π—Ç–∏ –æ—Ç –≤–æ–¥—ã, –ø–æ–¥–Ω—è—Ç—å—Å—è –≤—ã—à–µ, –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º',
            '–£–∫—Ä—ã—Ç—å—Å—è –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏,ËøúÁ¶ª –æ–∫–æ–Ω, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å',
            '–û–ø—É—Å—Ç–∏—Ç—å—Å—è –Ω–∞ –∫–æ—Ä—Ç–æ—á–∫–∏, —É–∫—Ä—ã—Ç—å—Å—è, –≤—ã–π—Ç–∏ –Ω–∞—Ä—É–∂—É –ø–æ—Å–ª–µ',
            '–ü–æ–∫–∏–Ω—É—Ç—å –∑–æ–Ω—É, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–≤—è–∑–∫—É, —Å–æ–æ–±—â–∏—Ç—å 112',
            '–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –¥–æ–º–∞, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç–µ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø—Ä–∏–ø–∞—Å—ã',
            '–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±–æ–≥—Ä–µ–≤, –∏–∑–±–µ–≥–∞–π—Ç–µ –ø–µ—Ä–µ–æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è',
            '–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä, –ø–µ–π—Ç–µ –≤–æ–¥—É',
            '–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –Ω–∞ —É–ª–∏—Ü–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤–æ—Å–∫–æ–ª—å–∑—è—â–∏–µ –Ω–∞–∫–ª–∞–¥–∫–∏',
            '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–∫–∏–Ω—å—Ç–µ –∑–æ–Ω—É —É–≥—Ä–æ–∑—ã, –¥–≤–∏–≥–∞–π—Ç–µ—Å—å –≤–≤–µ—Ä—Ö –ø–æ —Å–∫–ª–æ–Ω—É',
            '–°–æ–æ–±—â–∏—Ç–µ –≤ 112, –æ—Ç–æ–π–¥–∏—Ç–µ –æ—Ç –ª–µ—Å–∞, –Ω–µ —Ä–∞–∑–≤–æ–¥–∏—Ç–µ –∫–æ—Å—Ç—Ä—ã',
            '–°–æ–æ–±—â–∏—Ç–µ –≤ 112, –∏–∑–±–µ–≥–∞–π—Ç–µ –º–µ—Å—Ç —Å–∫–æ–ø–ª–µ–Ω–∏—è –ª—é–¥–µ–π, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –≥–∏–≥–∏–µ–Ω—É',
            '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–∫–∏–Ω—å—Ç–µ –∑–æ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞—â–∏—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, —Å–æ–æ–±—â–∏—Ç–µ 112',
            '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–∫–∏–Ω—å—Ç–µ –∑–æ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞—â–∏—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, —Å–æ–æ–±—â–∏—Ç–µ 112',
            '–°–æ–æ–±—â–∏—Ç–µ –≤ 112, –æ–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–º–æ—â—å, –Ω–µ —Ç—Ä–æ–≥–∞–π—Ç–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏',
            '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–∫–∏–Ω—å—Ç–µ –∑–æ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞—â–∏—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, —Å–æ–æ–±—â–∏—Ç–µ 112',
            '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–∫–∏–Ω—å—Ç–µ –∑–æ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞—â–∏—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, —Å–æ–æ–±—â–∏—Ç–µ 112',
            '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–∫–∏–Ω—å—Ç–µ –∑–æ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞—â–∏—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, —Å–æ–æ–±—â–∏—Ç–µ 112'
        ]
    }
    df = pd.DataFrame(data)
    return df

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–æ–∫ ---
def load_memos():
    if os.path.exists('memos.json'):
        with open('memos.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        return []

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ session_state ---
if 'buildings_df' not in st.session_state:
    st.session_state['buildings_df'] = load_buildings_data()

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏ images –∏ videos, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs("images", exist_ok=True)
os.makedirs("videos", exist_ok=True)

rules_df = load_emergency_rules()
memos = load_memos()

# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ ---
if not st.session_state['accepted_terms']:
    st.title("üö® –ì–û-–ö–∞—Ä—Ç–∞: –û–±—É—á–µ–Ω–∏–µ –ø–æ –ü—Ä–∏–∫–∞–∑—É –ú–ß–° ‚Ññ429")
    st.markdown("""
    ### –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

    –≠—Ç–æ **–æ–±—É—á–∞—é—â–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ** –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å **–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ß–°** –∏ **–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å** –≤ –Ω–∏—Ö,
    –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ **–ü—Ä–∏–∫–∞–∑–µ –ú–ß–° –†–æ—Å—Å–∏–∏ ‚Ññ429**. –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Ç–æ–ø–æ–æ—Å–Ω–æ–≤–µ (–∫–∞—Ä—Ç–∞ –ò–∂–µ–≤—Å–∫–∞) ‚Äî –∫–ª—é—á–µ–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å.

    –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è", –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """)
    if st.button("–ü—Ä–æ—á–∏—Ç–∞—Ç—å —É—Å–ª–æ–≤–∏—è"):
        st.session_state['show_terms'] = True
    if st.button("–ü—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è"):
        st.session_state['accepted_terms'] = True
        st.rerun()
    if st.session_state.get('show_terms'):
        st.subheader("–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        st.markdown("""
        –ü—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—å –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø—Ä—è–º—ã–µ –∏–ª–∏ –∫–æ—Å–≤–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏/–∏–ª–∏ —É—â–µ—Ä–±, –ø—Ä–∏—á–∏–Ω–µ–Ω–Ω—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏/–∏–ª–∏ —Ç—Ä–µ—Ç—å–∏–º —Å—Ç–æ—Ä–æ–Ω–∞–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏/–∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–π, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏–∑-–∑–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∏–ª–∏ —Å–±–æ–µ–≤ –≤ —Ä–∞–±–æ—Ç–µ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

        –° –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ —Å—Å—ã–ª–∫–µ: https://—Å—Å—ã–ª–∫–∞/
        """)
        if st.button("–ü—Ä–∏–Ω–∏–º–∞—é"):
            st.session_state['accepted_terms'] = True
            st.session_state['show_terms'] = False
            st.rerun()
else:
    # --- –í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞ ---
    if not st.session_state['selected_district']:
        st.title("üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω")
        st.markdown("""
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–∞–π–æ–Ω, –≥–¥–µ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –í–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–∞.

        –ú—ã –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ä–µ–≥–∏–æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –≥–¥–µ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É–∂–±—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –í–∞—à–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é, –≤ —Ç–æ–º —á–∏—Å–ª–µ, –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.

        –î–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:
        - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é;
        - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã;
        - –∫–∞—Ä—Ç–∞.
        """)
        districts = ["–ò–∂–µ–≤—Å–∫", "–õ–µ–Ω–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–£—Å—Ç–∏–Ω–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω"]
        selected_district = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω", districts)
        if st.button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
            st.session_state['selected_district'] = selected_district
            st.rerun()
    else:
        # --- –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ---
        st.title("üö® –ì–û-–ö–∞—Ä—Ç–∞: –û–±—É—á–µ–Ω–∏–µ –ø–æ –ü—Ä–∏–∫–∞–∑—É –ú–ß–° ‚Ññ429")
        st.markdown(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–π–æ–Ω: **{st.session_state['selected_district']}**")

        # --- –ù–∞–≤–∏–≥–∞—Ü–∏—è ---
        st.sidebar.header("–ú–µ–Ω—é")
        menu = st.sidebar.radio(
            "",
            ["–ì–ª–∞–≤–Ω–∞—è", "–ü–∞–º—è—Ç–∫–∏", "–ö–∞—Ä—Ç–∞", "–î–æ–±–∞–≤–∏—Ç—å –ø–∞–º—è—Ç–∫—É", "–î–æ–±–∞–≤–∏—Ç—å –∑–¥–∞–Ω–∏–µ"],
            key="navigation"
        )

        if menu == "–ì–ª–∞–≤–Ω–∞—è":
            # --- –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è ---
            st.subheader("üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")

            # –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ Streamlit Cloud)
            st.info("üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ.")

            # –í—ã–±–æ—Ä –ø–æ –∞–¥—Ä–µ—Å—É
            address_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ò–∂–µ–≤—Å–∫, —É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è, 1')", value="")
            if st.button("–ù–∞–π—Ç–∏ –∞–¥—Ä–µ—Å"):
                if address_input.strip():
                    geolocator = Nominatim(user_agent="go_karta_training")
                    location = geolocator.geocode(address_input)
                    if location:
                        user_lat = location.latitude
                        user_lon = location.longitude
                        st.session_state['user_location'] = (user_lat, user_lon)
                        st.success(f"‚úÖ –ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω: {location.address}. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {user_lat:.5f}, {user_lon:.5f}")
                    else:
                        st.error("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
                else:
                    st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å.")

            # --- –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ß–° ---
            st.subheader("üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ß–° (–æ–±—É—á–µ–Ω–∏–µ)")
            selected_emergency = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –∏–∑ –ü—Ä–∏–∫–∞–∑–∞ –ú–ß–° ‚Ññ429",
                options=rules_df['type_ru'].tolist(),
                index=0,
                key="emergency_select_main"
            )
            if selected_emergency:
                st.session_state['selected_emergency'] = selected_emergency

            # --- –ö–∞—Ä—Ç–∞ ---
            st.subheader("üó∫Ô∏è –ö–∞—Ä—Ç–∞ –ò–∂–µ–≤—Å–∫–∞ –∏ –∑–¥–∞–Ω–∏—è")

            # –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
            center_lat = st.session_state['user_location'][0] if st.session_state['user_location'] else 56.8519
            center_lon = st.session_state['user_location'][1] if st.session_state['user_location'] else 53.2013

            # –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É
            m = folium.Map(
                location=[center_lat, center_lon],
                zoom_start=13,
                tiles="OpenStreetMap"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–¥–∞–Ω–∏—è –∏–∑ session_state
            for _, row in st.session_state['buildings_df'].iterrows():
                folium.Marker(
                    location=[row['latitude'], row['longitude']],
                    popup=f"""
                    <b>ID:</b> {row['id']}<br>
                    <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b> {row['purpose']}<br>
                    <b>–≠—Ç–∞–∂–Ω–æ—Å—Ç—å:</b> {row['floors']}<br>
                    <b>–ú–∞—Ç–µ—Ä–∏–∞–ª:</b> {row['material']}
                    """,
                    icon=folium.Icon(color="blue", icon="home", prefix="fa")
                ).add_to(m)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–≤–µ–¥–µ–Ω—ã)
            if st.session_state['user_location']:
                folium.Marker(
                    location=st.session_state['user_location'],
                    popup="üìç –í—ã –∑–¥–µ—Å—å",
                    icon=folium.Icon(color="red", icon="user", prefix="fa")
                ).add_to(m)

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–ª–∏–∫–∞
            map_data = st_folium(m, width="100%", height=500, key="main_map")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
            if map_data and map_data.get('last_clicked'):
                clicked_lat = map_data['last_clicked']['lat']
                clicked_lon = map_data['last_clicked']['lng']
                st.session_state['user_location'] = (clicked_lat, clicked_lon)
                st.success(f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–ª–∏–∫–æ–º: –®–∏—Ä–æ—Ç–∞ {clicked_lat:.5f}, –î–æ–ª–≥–æ—Ç–∞ {clicked_lon:.5f}")

            # --- –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∑–¥–∞–Ω–∏—è ---
            st.subheader("üè† –ë–ª–∏–∂–∞–π—à–µ–µ –∑–¥–∞–Ω–∏–µ")
            if st.session_state['user_location']:
                user_coords = st.session_state['user_location']
                closest_building = None
                min_distance = float('inf')

                for _, row in st.session_state['buildings_df'].iterrows():
                    building_coords = (row['latitude'], row['longitude'])
                    distance = geodesic(user_coords, building_coords).meters
                    if distance < min_distance:
                        min_distance = distance
                        closest_building = row

                if closest_building is not None:
                    st.session_state['closest_building'] = closest_building
                    st.info(f"‚úÖ –ë–ª–∏–∂–∞–π—à–µ–µ –∑–¥–∞–Ω–∏–µ: {closest_building['purpose']}, {closest_building['floors']} —ç—Ç., {closest_building['material']}. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {min_distance:.2f} –º.")
                    st.markdown(f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è –∑–¥–∞–Ω–∏—è:**")
                    if '–¥–µ—Ä–µ–≤–æ' in closest_building['material'].lower():
                        st.warning("–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ ‚Äî –≤—ã—Å–æ–∫ —Ä–∏—Å–∫ –ø–æ–∂–∞—Ä–∞. –≠–≤–∞–∫—É–∏—Ä—É–π—Ç–µ—Å—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.")
                    elif '–∫–∏—Ä–ø–∏—á' in closest_building['material'].lower() or '–±–µ—Ç–æ–Ω' in closest_building['material'].lower():
                        st.info("–ö–∏—Ä–ø–∏—á/–±–µ—Ç–æ–Ω ‚Äî –±–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤–æ. –ú–æ–∂–µ—Ç —Å–ª—É–∂–∏—Ç—å —É–∫—Ä—ã—Ç–∏–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —É–≥—Ä–æ–∑.")
                    else:
                        st.info("–°–ª–µ–¥—É–π—Ç–µ –ø–ª–∞–Ω—É —ç–≤–∞–∫—É–∞—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∞ –∑–¥–∞–Ω–∏—è.")
                else:
                    st.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–µ –∑–¥–∞–Ω–∏–µ.")
                    st.session_state['closest_building'] = None
            else:
                st.info("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–ø–æ –∞–¥—Ä–µ—Å—É –∏–ª–∏ –∫–ª–∏–∫–æ–º –Ω–∞ –∫–∞—Ä—Ç–µ), —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–µ –∑–¥–∞–Ω–∏–µ.")
                st.session_state['closest_building'] = None

            # --- –ü–ª–∞–Ω —ç–≤–∞–∫—É–∞—Ü–∏–∏ –∏–ª–∏ –º–∞—Ä—à—Ä—É—Ç ---
            if st.session_state['user_location']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–ª–∏–∂–∞–π—à–µ–µ –∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–≤–Ω—É—Ç—Ä–∏" (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ < 5 –º–µ—Ç—Ä–æ–≤)
                if st.session_state['closest_building'] is not None and min_distance < 5:
                    st.subheader("üìã –ü–ª–∞–Ω —ç–≤–∞–∫—É–∞—Ü–∏–∏")
                    building_plan_link = st.session_state['closest_building'].get('plan_link')
                    if building_plan_link:
                        st.markdown(f"–ü–ª–∞–Ω —ç–≤–∞–∫—É–∞—Ü–∏–∏ –¥–ª—è **{st.session_state['closest_building']['purpose']}** (ID: {st.session_state['closest_building']['id']}):")
                        st.image(building_plan_link, caption=f"–ü–ª–∞–Ω —ç–≤–∞–∫—É–∞—Ü–∏–∏ –¥–ª—è {st.session_state['closest_building']['purpose']}", use_container_width=True)
                    else:
                        st.info("–ü–ª–∞–Ω —ç–≤–∞–∫—É–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                else:
                    st.subheader("üèÉ‚Äç‚ôÇÔ∏è –°—Ö–µ–º–∞ –º–∞—Ä—à—Ä—É—Ç–∞")
                    st.info("–°—Ö–µ–º–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–æ–Ω—ã –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –∑–¥–µ—Å—å. (–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

            # --- –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ---
            st.subheader("üìã –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –ß–°")
            if st.session_state['selected_emergency']:
                rule_row = rules_df[rules_df['type_ru'] == st.session_state['selected_emergency']].iloc[0]
                st.markdown(f"**–¢–∏–ø –ß–°:** {st.session_state['selected_emergency']}")
                st.markdown(f"**–î–µ–π—Å—Ç–≤–∏—è:** {rule_row['actions_ru']}")
                st.info("‚úÖ –°–ª–µ–¥—É–π—Ç–µ —ç—Ç–∏–º —à–∞–≥–∞–º –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø–æ–¥–æ–±–Ω–æ–π –ß–°.")

            # --- –°—Ü–µ–Ω–∞—Ä–∏–π —ç–≤–∞–∫—É–∞—Ü–∏–∏ ---
            st.subheader("üèÉ‚Äç‚ôÇÔ∏è –°—Ü–µ–Ω–∞—Ä–∏–π —ç–≤–∞–∫—É–∞—Ü–∏–∏")
            if st.session_state['selected_emergency'] and st.session_state['user_location']:
                st.markdown(f"**–°—Ü–µ–Ω–∞—Ä–∏–π:** –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã –≤ –ò–∂–µ–≤—Å–∫–µ, —Ä—è–¥–æ–º —Å –≤–∞–º–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ **{st.session_state['selected_emergency']}**.")
                st.markdown("1. üìç –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ.")
                st.markdown("2. üè† –ù–∞–π–¥–∏—Ç–µ –±–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ –∏–ª–∏ —ç–≤–∞–∫—É–∞—Ü–∏–æ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç (–æ—Ç–º–µ—á–µ–Ω –Ω–∞ –∫–∞—Ä—Ç–µ).")
                st.markdown("3. üö® –°–ª–µ–¥—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ß–°.")
                st.markdown("4. ‚òéÔ∏è –°–æ–æ–±—â–∏—Ç–µ –æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–∏ –≤ –ú–ß–°: **112**.")
            else:
                st.info("‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ß–° –∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è.")

            # --- –ü–æ–¥–≤–∞–ª / —É–∫—Ä—ã—Ç–∏–µ ---
            st.subheader("üèóÔ∏è –ì–¥–µ —É–∫—Ä—ã—Ç—å—Å—è?")
            st.markdown("""
            - **–ü–æ–¥–≤–∞–ª—ã, —Ü–æ–∫–æ–ª—å–Ω—ã–µ —ç—Ç–∞–∂–∏** –∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã—Ö –∑–¥–∞–Ω–∏–π (–±–µ—Ç–æ–Ω/–∫–∏—Ä–ø–∏—á).
            - **–£–∫—Ä—ã—Ç–∏—è** (—É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –ø–ª–∞–Ω–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å).
            - **–î–∞–ª—å—à–µ –æ—Ç –æ–∫–æ–Ω**, –≤–¥–∞–ª–∏ –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ–±–ª–æ–º–∫–æ–≤.
            - **–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏—Ñ—Ç—ã**.
            """)

            # --- –ü–æ–¥–≤–∞–ª / —É–∫—Ä—ã—Ç–∏–µ ---
            st.subheader("üìö –û–±—É—á–µ–Ω–∏–µ")
            st.markdown("""
            **–ü—Ä–∏–∫–∞–∑ –ú–ß–° ‚Ññ429** –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ß–° –ø–æ:
            - –¢–∏–ø—É (–ø—Ä–∏—Ä–æ–¥–Ω—ã–µ, —Ç–µ—Ö–Ω–æ–≥–µ–Ω–Ω—ã–µ, –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏ –¥—Ä.).
            - –ú–∞—Å—à—Ç–∞–±—É (–ª–æ–∫–∞–ª—å–Ω—ã–µ, –º–µ—Å—Ç–Ω—ã–µ, —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ, —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ).
            - –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º (–∂–µ—Ä—Ç–≤—ã, —É—â–µ—Ä–±, –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è).

            –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–ø—Ä–æ—â–∞–µ—Ç –∏—Ö –¥–ª—è **–æ–±—ã–≤–∞—Ç–µ–ª—è**.
            """)

        elif menu == "–ü–∞–º—è—Ç–∫–∏":
            st.subheader("üìö –ü–∞–º—è—Ç–∫–∏ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º –≤ –ß–°")

            # --- –ö–∞—Ä—Ç–æ—á–∫–∏ —Å –ø–∞–º—è—Ç–∫–∞–º–∏ –≤ –≤–∏–¥–µ —Å–µ—Ç–∫–∏ 2x3 ---
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞–º—è—Ç–æ–∫, —Å–æ–∑–¥–∞–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            if not memos:
                # –§–∏–∫—Ç–∏–≤–Ω—ã–µ –ø–∞–º—è—Ç–∫–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
                demo_memos = [
                    {
                        'title': '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∞—è –æ–±–æ—Ä–æ–Ω–∞',
                        'content': '–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–π –æ–±–æ—Ä–æ–Ω—ã.',
                        'image': 'https://via.placeholder.com/300x200/4a90e2/ffffff?text=–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∞—è+–æ–±–æ—Ä–æ–Ω–∞',
                        'video': None,
                        'category': '–û–±—â–µ–µ'
                    },
                    {
                        'title': '–ó–∞—â–∏—Ç–∞ –≤ —á—Ä–µ–∑–≤—ã—á–∞–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö',
                        'content': '–ö–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ß–°.',
                        'image': 'https://via.placeholder.com/300x200/f5a623/ffffff?text=–ó–∞—â–∏—Ç–∞+–≤+–ß–°',
                        'video': None,
                        'category': '–û–±—â–µ–µ'
                    },
                    {
                        'title': '–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
                        'content': '–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–∂–∞—Ä–µ.',
                        'image': 'https://via.placeholder.com/300x200/e74c3c/ffffff?text=–ü–æ–∂–∞—Ä–Ω–∞—è+–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
                        'video': None,
                        'category': '–ü–æ–∂–∞—Ä'
                    },
                    {
                        'title': '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞ –≤–æ–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö',
                        'content': '–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –≤–æ–¥–æ–µ–º–∞—Ö.',
                        'image': 'https://via.placeholder.com/300x200/3498db/ffffff?text=–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å+–Ω–∞+–≤–æ–¥–µ',
                        'video': None,
                        'category': '–í–æ–¥–∞'
                    },
                    {
                        'title': '–ü–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å',
                        'content': '–û—Å–Ω–æ–≤—ã –æ–∫–∞–∑–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –ø–æ–º–æ—â–∏.',
                        'image': 'https://via.placeholder.com/300x200/2ecc71/ffffff?text=–ü–µ—Ä–≤–∞—è+–ø–æ–º–æ—â—å',
                        'video': None,
                        'category': '–ú–µ–¥–∏—Ü–∏–Ω–∞'
                    },
                    {
                        'title': '–¢—É—Ä–∏—Å—Ç—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã',
                        'content': '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –ø–æ—Ö–æ–¥–∞—Ö –∏ —Ç—É—Ä–∏–∑–º–µ.',
                        'image': 'https://via.placeholder.com/300x200/9b59b6/ffffff?text=–¢—É—Ä–∏—Å—Ç—Å–∫–∏–µ+–≥—Ä—É–ø–ø—ã',
                        'video': None,
                        'category': '–¢—É—Ä–∏–∑–º'
                    }
                ]
                memos = demo_memos

            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–∞–º—è—Ç–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 —ç–ª–µ–º–µ–Ω—Ç–∞
            for i in range(0, len(memos), 2):
                cols = st.columns(2)
                for j, memo in enumerate(memos[i:i+2]):
                    with cols[j]:
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        if memo.get('image'):
                            try:
                                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏
                                st.image(memo['image'], use_container_width=True)
                            except Exception as e:
                                # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
                                st.warning("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                                st.image("https://via.placeholder.com/300x200/cccccc/000000?text=–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)
                        else:
                            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
                            st.image("https://via.placeholder.com/300x200/cccccc/000000?text=–ë–µ–∑+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", use_container_width=True)

                        st.markdown(f"### {memo['title']}")
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
                        col1, col2 = st.columns(2)
                        with col1:
                            if st.button("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", key=f"memo_{i+j}_view"):
                                st.session_state['show_memo'] = memo['title']
                                st.rerun()
                        with col2:
                            if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"memo_{i+j}_delete"):
                                # –£–¥–∞–ª—è–µ–º –ø–∞–º—è—Ç–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞
                                memos.remove(memo)
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                                with open('memos.json', 'w', encoding='utf-8') as f:
                                    json.dump(memos, f, ensure_ascii=False, indent=4)
                                st.success(f"‚úÖ –ü–∞–º—è—Ç–∫–∞ '{memo['title']}' —É–¥–∞–ª–µ–Ω–∞!")
                                st.rerun()

            # --- –ü–æ–∫–∞–∑ –ø–∞–º—è—Ç–∫–∏ ---
            if st.session_state['show_memo']:
                st.subheader(f"üìñ –ü–∞–º—è—Ç–∫–∞: {st.session_state['show_memo']}")
                for memo in memos:
                    if memo['title'] == st.session_state['show_memo']:
                        st.markdown(memo['content'])
                        # –ü–æ–∫–∞–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                        if memo.get('image'):
                            try:
                                st.image(memo['image'], caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –ø–∞–º—è—Ç–∫–µ", use_container_width=True)
                            except Exception as e:
                                st.warning("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                                st.image("https://via.placeholder.com/600x400/cccccc/000000?text=–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ+–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –ø–∞–º—è—Ç–∫–µ", use_container_width=True)

                        # –ü–æ–∫–∞–∑ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                        if memo.get('video'):
                            try:
                                st.video(memo['video'])
                            except Exception as e:
                                st.warning("‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                                st.info("–í–∏–¥–µ–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (MP4, AVI, MOV).")
                        break
                if st.button("–ù–∞–∑–∞–¥"):
                    st.session_state['show_memo'] = None
                    st.rerun()

        elif menu == "–ö–∞—Ä—Ç–∞":
            st.subheader("üó∫Ô∏è –ö–∞—Ä—Ç–∞ –ò–∂–µ–≤—Å–∫–∞ –∏ –∑–¥–∞–Ω–∏—è")

            # –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
            center_lat = 56.8519
            center_lon = 53.2013

            # –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É
            m = folium.Map(
                location=[center_lat, center_lon],
                zoom_start=13,
                tiles="OpenStreetMap"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–¥–∞–Ω–∏—è –∏–∑ session_state
            for _, row in st.session_state['buildings_df'].iterrows():
                folium.Marker(
                    location=[row['latitude'], row['longitude']],
                    popup=f"""
                    <b>ID:</b> {row['id']}<br>
                    <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b> {row['purpose']}<br>
                    <b>–≠—Ç–∞–∂–Ω–æ—Å—Ç—å:</b> {row['floors']}<br>
                    <b>–ú–∞—Ç–µ—Ä–∏–∞–ª:</b> {row['material']}
                    """,
                    icon=folium.Icon(color="blue", icon="home", prefix="fa")
                ).add_to(m)

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É
            st_folium(m, width="100%", height=500)

        elif menu == "–î–æ–±–∞–≤–∏—Ç—å –ø–∞–º—è—Ç–∫—É":
            st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞–º—è—Ç–∫—É")
            memo_title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∫–∏")
            memo_content = st.text_area("–¢–µ–∫—Å—Ç –ø–∞–º—è—Ç–∫–∏")
            memo_image = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –ø–∞–º—è—Ç–∫–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", type=["png", "jpg", "jpeg"])
            memo_video = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –∫ –ø–∞–º—è—Ç–∫–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", type=["mp4", "avi", "mov"])

            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞–º—è—Ç–∫—É"):
                if memo_title and memo_content:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    image_path = None
                    if memo_image:
                        image_filename = f"{memo_title.replace(' ', '_')}_{memo_image.name}"
                        image_path = os.path.join("images", image_filename)
                        os.makedirs("images", exist_ok=True)
                        with open(image_path, "wb") as f:
                            f.write(memo_image.getbuffer())
                        st.success(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ '{image_filename}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ
                    video_path = None
                    if memo_video:
                        video_filename = f"{memo_title.replace(' ', '_')}_{memo_video.name}"
                        video_path = os.path.join("videos", video_filename)
                        os.makedirs("videos", exist_ok=True)
                        with open(video_path, "wb") as f:
                            f.write(memo_video.getbuffer())
                        st.success(f"‚úÖ –í–∏–¥–µ–æ '{video_filename}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

                    new_memo = {
                        'title': memo_title,
                        'content': memo_content,
                        'image': image_path,
                        'video': video_path
                    }
                    memos.append(new_memo)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                    with open('memos.json', 'w', encoding='utf-8') as f:
                        json.dump(memos, f, ensure_ascii=False, indent=4)
                    st.success(f"‚úÖ –ü–∞–º—è—Ç–∫–∞ '{memo_title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                    st.rerun()
                else:
                    st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.")

        elif menu == "–î–æ–±–∞–≤–∏—Ç—å –∑–¥–∞–Ω–∏–µ":
            st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–¥–∞–Ω–∏–µ")
            building_id = st.number_input("ID –∑–¥–∞–Ω–∏—è", min_value=1)
            building_latitude = st.number_input("–®–∏—Ä–æ—Ç–∞", value=56.8519, format="%.5f")
            building_longitude = st.number_input("–î–æ–ª–≥–æ—Ç–∞", value=53.2013, format="%.5f")
            building_floors = st.number_input("–≠—Ç–∞–∂–Ω–æ—Å—Ç—å", min_value=1)
            building_material = st.text_input("–ú–∞—Ç–µ—Ä–∏–∞–ª")
            building_purpose = st.text_input("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ")
            building_plan_link = st.text_input("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞–Ω —ç–≤–∞–∫—É–∞—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")

            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–¥–∞–Ω–∏–µ"):
                new_building = {
                    'id': int(building_id),
                    'latitude': building_latitude,
                    'longitude': building_longitude,
                    'floors': building_floors,
                    'material': building_material,
                    'purpose': building_purpose,
                    'plan_link': building_plan_link
                }
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–¥–∞–Ω–∏–µ –≤ DataFrame –≤ session_state
                new_row = pd.DataFrame([new_building])
                st.session_state['buildings_df'] = pd.concat([st.session_state['buildings_df'], new_row], ignore_index=True)
                st.success(f"‚úÖ –ó–¥–∞–Ω–∏–µ '{building_purpose}' (ID: {building_id}) –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
                # st.rerun() # –ù–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏

# --- –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø—Ä–∏–Ω—Ç –≤ –∫–æ–Ω—Ü–µ ---
st.write("üöÄ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
